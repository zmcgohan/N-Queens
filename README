:.:.: N-Queens :.:.:

The N-Queens problem is a popular AI toy problem meant to show efficiency of different algorithms. The problem is to place N queens, which can attack other queens vertically, horizontally or diagonally from their position, on a NxN board where none of the queens can attack another.

This implementation is made to exemplify different algorithms being used to solve the N-Queens problem.

Algorithms: 
	GreedyIncrementalPlacer: Tries to place a new queen in a spot on the board every cycle to where the queen can't attack any others. If it doesn't succeed to place N queens in a cycle, it puts that board in a list of boards it's tried in the past. For each queen to-be-placed, the board that would be created is tested against this past list of boards. The queen is placed only if the new board wouldn't match any old ones.
		Takes 1962 boards to reach solution for 8 queen, 8x8 board. (Timewise, the first method used took about 6-6 1/2 minutes. The second method, 3-3 1/2. After hashing was used, 16-18 SECONDS!! Noice.)

	LeftmostIncrementalPlacer: Places a queen in each column, starting from the leftmost and going to the rightmost. Does not place a queen in any spots that are already attacked. GREATLY decreases the possible states from GreedyIncrementalPlacer and GREATLY decreases the time to find a solution as well. 
		Takes 106 boards to reach solution for 8 queen, 8x8 board. (Timewise, less than a hundredth of a second versus 16-18 seconds after optimization for GreedyIncrementalPlacer.)
